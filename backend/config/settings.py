"""
Django settings for PastPaperRank project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
import sys
from pathlib import Path
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(BASE_DIR / ".env")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-yov2k0yc^m+)!v^m(oxic2ol(t$9nkj-8a+1&to4886dmumqib"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition
VENDOR_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.postgres",
    "django_dramatiq",
    "drf_spectacular",
    "rest_framework"
]
LOCAL_APPS = [
    "backend.apps.accounts",
    "backend.apps.indexing",
    "backend.apps.pastpaper",
    "backend.apps.service",
    "backend.apps.retrieval"
]

INSTALLED_APPS = LOCAL_APPS + VENDOR_APPS

VENDOR_MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "ninja.compatibility.files.fix_request_files_middleware"
]

LOCAL_MIDDLEWARE = [

]
MIDDLEWARE = VENDOR_MIDDLEWARE + LOCAL_MIDDLEWARE

# ROOT_URLCONF = "config.urls"
ROOT_URLCONF = "backend.config.urls"
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / 'templates']
        ,
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.config.wsgi.application"
ASGI_APPLICATION = 'backend.config.asgi.application'

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "simple": {
            "format": "[{levelname}] {asctime} {name}: {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "stream": sys.stdout,
            "formatter": "simple",
        },
    },
    "loggers": {
        "backend.service.realtime": {
            "handlers": ["console"],
            "level": "DEBUG",
            "propagate": False,
        },
        "channels": {"handlers": ["console"], "level": "INFO"},
        "daphne": {"handlers": ["console"], "level": "INFO"},
        "": {"handlers": ["console"], "level": "INFO"},
    },
}

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
REDIS_URL = "redis://" + os.getenv("REDIS_HOST", "redis") + ":" + os.getenv("REDIS_PORT", "6379")

QDRANT_HOST = os.getenv("QDRANT_HOST", "qdrant")
QDRANT_PORT = os.getenv("QDRANT_PORT", "6333")

QDRANT_URL = f"http://{QDRANT_HOST}:{QDRANT_PORT}"

QDRANT_API_KEY = os.getenv("QDRANT_API_KEY", "")
QDRANT_TIMEOUT = float(os.getenv("QDRANT_TIMEOUT", "20"))
INDEXING_SKIP_QDRANT_HEALTHCHECK = os.getenv("INDEXING_SKIP_QDRANT_HEALTHCHECK", "0").lower() in {"1", "true", "yes"}

INDEXING_PLAN_QUEUE = os.getenv("INDEXING_PLAN_QUEUE", "indexing-plan")
INDEXING_EMBED_QUEUE = os.getenv("INDEXING_EMBED_QUEUE", "indexing-embed")
INDEXING_EMBED_BATCH_SIZE = int(os.getenv("INDEXING_EMBED_BATCH_SIZE", "32"))
INDEXING_MAX_EMBED_RETRIES = int(os.getenv("INDEXING_MAX_EMBED_RETRIES", "2"))

CHANNEL_REDIS_URL = f"{REDIS_URL}/2"

DEFAULT_DB_NAME = os.getenv("DB_NAME")
if not DEFAULT_DB_NAME:
    DEFAULT_DB_NAME = str(BASE_DIR / "default_db")

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": DEFAULT_DB_NAME,
        "USER": os.getenv("DB_USER", ""),
        "PASSWORD": os.getenv("DB_PASSWORD", ""),
        "HOST": os.getenv("DB_HOST", "localhost"),
        "PORT": os.getenv("DB_PORT", "5432"),
    }
}

if os.getenv("DJANGO_USE_SQLITE", "0").lower() in {"1", "true", "yes"}:
    DATABASES["default"] = {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": str(BASE_DIR / "dev.sqlite3"),
    }

# if "test" in sys.argv:
#     DATABASES["default"] = {
#         "ENGINE": "django.db.backends.sqlite3",
#         "NAME": BASE_DIR / "test.sqlite3",
#     }

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [CHANNEL_REDIS_URL],
        },
    },
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]
DRAMATIQ_REDIS_URL = f"{REDIS_URL}/4"

DRAMATIQ_BROKER = {
    "BROKER": "dramatiq.brokers.redis.RedisBroker",
    "OPTIONS": {
        "url": DRAMATIQ_REDIS_URL,
    },
    "MIDDLEWARE": [
        "dramatiq.middleware.Prometheus",
        "dramatiq.middleware.AgeLimit",
        "dramatiq.middleware.TimeLimit",
        "dramatiq.middleware.Callbacks",
        "dramatiq.middleware.Retries",
        "dramatiq.middleware.CurrentMessage",
        "django_dramatiq.middleware.DbConnectionsMiddleware",
    ]
}

DRAMATIQ_RESULT_BACKEND = {
    "BACKEND": "dramatiq.results.backends.redis.RedisBackend",
    "BACKEND_OPTIONS": {"url": f"{REDIS_URL}/4"},
    "MIDDLEWARE_OPTIONS": {"result_ttl": 1000 * 60 * 10},
}

RESULT_STREAM_KEY = "ppr:dramatiq:result_stream"
RESULT_GROUP = "ppr_result_router"
RESULT_CONSUMER = "router-%(pid)s"
RESULT_ROUTE_PREFIX = "ppr:await:route:"

IOQUEUE_REDIS_URL = os.getenv("IOQUEUE_REDIS_URL", f"{REDIS_URL}/5")
IOQUEUE_REDIS_QUEUE_KEY = os.getenv("IOQUEUE_REDIS_QUEUE_KEY", "ioqueue:memory")
IOQUEUE_MEMORY_BLPOP_TIMEOUT_SEC = int(os.getenv("IOQUEUE_MEMORY_BLPOP_TIMEOUT_SEC", "5"))

ORCHESTRATOR_CALLBACK_URL = os.getenv(
    "ORCHESTRATOR_CALLBACK_URL",
    "http://localhost:8000/_orchestrator/resolve",
)

RETRIEVAL_USE_LLM_INTENT = os.getenv("RETRIEVAL_USE_LLM_INTENT", "true").lower() in {"1", "true", "yes"}
RETRIEVAL_USE_LLM_RERANK = os.getenv("RETRIEVAL_USE_LLM_RERANK", "true").lower() in {"1", "true", "yes"}
RETRIEVAL_LLM_MODEL = os.getenv("RETRIEVAL_LLM_MODEL", "google/gemini-2.0-flash-001")
RETRIEVAL_LLM_BASE_URL = os.getenv("RETRIEVAL_LLM_BASE_URL", "https://openrouter.ai/api/v1")
RETRIEVAL_LLM_API_KEY_ENV = os.getenv("RETRIEVAL_LLM_API_KEY_ENV", "OPENROUTER_APIKEY")
RETRIEVAL_LLM_TIMEOUT = float(os.getenv("RETRIEVAL_LLM_TIMEOUT", "45"))
RETRIEVAL_LLM_MAX_RETRIES = int(os.getenv("RETRIEVAL_LLM_MAX_RETRIES", "3"))
RETRIEVAL_LLM_BACKOFF_SECONDS = float(os.getenv("RETRIEVAL_LLM_BACKOFF_SECONDS", "0.5"))
RETRIEVAL_LLM_CONCURRENCY = int(os.getenv("RETRIEVAL_LLM_CONCURRENCY", "8"))
RETRIEVAL_LLM_TEMPERATURE = float(os.getenv("RETRIEVAL_LLM_TEMPERATURE", "0.0"))
RETRIEVAL_LLM_MAX_CANDIDATES = int(os.getenv("RETRIEVAL_LLM_MAX_CANDIDATES", "12"))
RETRIEVAL_USE_LLM_REFINER = os.getenv("RETRIEVAL_USE_LLM_REFINER", "true").lower() in {"1", "true", "yes"}
RETRIEVAL_AGENT_MAX_ROUNDS = int(os.getenv("RETRIEVAL_AGENT_MAX_ROUNDS", "2"))

ACCOUNTS_BILLING_PERIOD_DAYS = int(os.getenv("ACCOUNTS_BILLING_PERIOD_DAYS", "30"))
ACCOUNTS_CONCURRENCY_WINDOW_SECONDS = int(os.getenv("ACCOUNTS_CONCURRENCY_WINDOW_SECONDS", "60"))

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = "accounts.User"

REST_FRAMEWORK = {
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "backend.apps.accounts.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.AllowAny",),
}

"""`/service` configs"""
CHANNEL_GROUP_PREFIX = os.getenv("RT_GROUP_PREFIX", "realtime")
STREAM_PREFIX = os.getenv("RT_STREAM_PREFIX", "stream:")
WS_SECRET = os.getenv("RT_WS_SECRET", SECRET_KEY)  # 默认用 Django SECRET_KEY
REPLAY_MAX = int(os.getenv("RT_REPLAY_MAX", "100"))

ACCOUNTS_ACCESS_TOKEN_LIFETIME_MINUTES = int(os.getenv("ACCOUNTS_ACCESS_TOKEN_LIFETIME_MINUTES", "15"))
ACCOUNTS_REFRESH_TOKEN_LIFETIME_DAYS = int(os.getenv("ACCOUNTS_REFRESH_TOKEN_LIFETIME_DAYS", "14"))
ACCOUNTS_DEFAULT_ROLE_SLUG = os.getenv("ACCOUNTS_DEFAULT_ROLE_SLUG", "viewer")
ACCOUNTS_ROTATE_REFRESH_TOKENS = os.getenv("ACCOUNTS_ROTATE_REFRESH_TOKENS", "true").lower() in ("1", "true", "yes")
